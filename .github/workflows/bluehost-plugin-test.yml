name: Build and Test With Bluehost Plugin
on:
  workflow_dispatch:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  job:
    name: Build Plugin Module Branch and Test
    runs-on: ubuntu-latest
    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          coverage: none
          tools: composer, cs2pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout plugin
        uses: actions/checkout@v4
        with:
          repository: bluehost/bluehost-wordpress-plugin
          ref: 'main'

      - name: Use Node.js 16.x
        uses: actions/setup-node@v4
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer vendor directory
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Show versions
        run: |
          php --version
          composer --version
          node --version
          npm --version

      - name: Install PHP Dependencies
        run: composer install --no-progress --no-dev --optimize-autoloader --prefer-dist

      - name: Get source for module
        run: |
          composer reinstall ${{ github.repository }} --prefer-source

      - name: Checkout module branch
        if: ${{ steps.extract_branch.outputs.branch != 'main' }}
        working-directory: ./vendor/${{ github.repository }}
        run: git checkout --track origin/${{ steps.extract_branch.outputs.branch }}

      - name: Validate composer.json and composer.lock
        working-directory: ./vendor/${{ github.repository }}
        run: composer validate

      - name: Install Module PHP Dependencies
        working-directory: ./vendor/${{ github.repository }}
        run: composer install --no-progress --no-dev --optimize-autoloader --prefer-dist

      - name: Setup workflow context
        id: workflow
        working-directory: ${{ runner.temp }}
        env:
          REPO: 'bluehost/bluehost-wordpress-plugin'
        run: |
          mkdir dist
          echo "DIST=${PWD}/dist" >> $GITHUB_OUTPUT
          echo "PACKAGE=${REPO##*/}" >> $GITHUB_OUTPUT

      - name: Setup Registry on Module
        working-directory: ./vendor/${{ github.repository }}
        run: printf "\n//npm.pkg.github.com/:_authToken=${{ secrets.NEWFOLD_ACCESS_TOKEN }}" >> .npmrc

      - name: Setup module
        working-directory: ./vendor/${{ github.repository }}
        run: npm ci --legacy-peer-deps

      - name: View modified files
        run: cat package.json composer.json

      # Skip because marketplace module doesn't have a build script.
      # - name: Build JavaScript in module
      #   working-directory: ./vendor/${{ github.repository }}
      #   run: npm run build

      - name: Setup Registry on Plugin
        run: printf "\n//npm.pkg.github.com/:_authToken=${{ secrets.NEWFOLD_ACCESS_TOKEN }}" >> .npmrc

      - name: NPM Install
        run: npm ci --legacy-peer-deps

      - name: Build JavaScript in plugin
        run: npm run build

      - name: Prepare files
        run: rsync -r --include-from=.distinclude --exclude-from=.distignore . ${{ steps.workflow.outputs.DIST }}

      - name: List Files
        working-directory: ${{ steps.workflow.outputs.DIST }}
        run: find .

      - name: Configure WordPress
        run: echo '{"plugins":["${{ steps.workflow.outputs.DIST }}/${{ steps.workflow.outputs.PACKAGE }}"]}' > .wp-env.override.json

      - name: Install WordPress
        run: npx wp-env start --debug

      - name: Run Cypress Tests
        run: npm run test:e2e -- --browser chrome

      - name: Store screenshots of test failures
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: ./tests/cypress/screenshots

      - name: Output debug.log file contents
        if: always()
        continue-on-error: true
        run: npx wp-env run wordpress "cat /var/www/html/wp-content/debug.log"

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.workflow.outputs.PACKAGE }}
          path: ${{ steps.workflow.outputs.DIST }}
